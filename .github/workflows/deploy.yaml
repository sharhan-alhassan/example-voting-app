name: voting-app

on:
  push:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-1
      EKS_CLUSTER_NAME_PROD: bionconsult-production
      VOTE_REPO_NAME: vote
      RESULT_REPO_NAME: result
      WORKER_REPO_NAME: worker

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Create ECR repos for vote, result, and worker
      - name: Create Vote ECR repo if necessary
        uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
        with:
          DOCKER_REPO_NAME: ${{ env.VOTE_REPO_NAME }}

      - name: Create Result ECR repo if necessary
        uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
        with:
          DOCKER_REPO_NAME: ${{ env.RESULT_REPO_NAME }}

      - name: Create Worker ECR repo if necessary
        uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
        with:
          DOCKER_REPO_NAME: ${{ env.WORKER_REPO_NAME }}

      - name: Get Current Date
        id: current-date
        run: |
          time=$(date +'%T')
          echo "date=$(date +'%m-%d-%Y')-${time//:/-}" >> $GITHUB_OUTPUT

      # Build and push Vote image
      - name: Build and Push Vote Image
        id: vote-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.current-date.outputs.date }}
        run: |
          docker build -f vote/Dockerfile -t $ECR_REGISTRY/${{ env.VOTE_REPO_NAME }}:$IMAGE_TAG vote/
          docker push $ECR_REGISTRY/${{ env.VOTE_REPO_NAME }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.VOTE_REPO_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Build and push Result image
      - name: Build and Push Result Image
        id: result-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.current-date.outputs.date }}
        run: |
          docker build -f result/Dockerfile -t $ECR_REGISTRY/${{ env.RESULT_REPO_NAME }}:$IMAGE_TAG result/
          docker push $ECR_REGISTRY/${{ env.RESULT_REPO_NAME }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.RESULT_REPO_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Build and push Worker image
      - name: Build and Push Worker Image
        id: worker-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.current-date.outputs.date }}
        run: |
          docker build -f worker/Dockerfile -t $ECR_REGISTRY/${{ env.WORKER_REPO_NAME }}:$IMAGE_TAG worker/
          docker push $ECR_REGISTRY/${{ env.WORKER_REPO_NAME }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.WORKER_REPO_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT


      ############################# VOTE IMAGE
      - name: Install Grype and jq
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          sudo apt-get update && sudo apt-get install -y jq

      - name: Scan Vote Image with Grype
        env:
          ECR_IMAGE: ${{ steps.vote-image.outputs.image }}
        run: |
          echo "🔍 Scanning $ECR_IMAGE"
          grype $ECR_IMAGE -o table
          grype $ECR_IMAGE -o json > grype-vote-report.json

      - name: Print Vote Scan Results
        run: |
          echo "📄 Grype scan JSON output for Vote image:"
          cat grype-vote-report.json

      - name: Upload Vote Scan Report to S3
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
          aws s3 cp grype-vote-report.json s3://bionconsult-scan-images-bucket/reports/vote/grype-vote-report-$TIMESTAMP.json


      ############################# RESULT IMAGE
      - name: Scan Result Image with Grype
        env:
          ECR_IMAGE: ${{ steps.result-image.outputs.image }}
        run: |
          echo "🔍 Scanning $ECR_IMAGE"
          grype $ECR_IMAGE -o table
          grype $ECR_IMAGE -o json > grype-result-report.json

      - name: Print Result Scan Results
        run: |
          echo "📄 Grype scan JSON output for Result image:"
          cat grype-result-report.json

      - name: Upload Result Scan Report to S3
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
          aws s3 cp grype-result-report.json s3://bionconsult-scan-images-bucket/reports/result/grype-result-report-$TIMESTAMP.json

      ############################# WORKER IMAGE
      - name: Scan Worker Image with Grype
        env:
          ECR_IMAGE: ${{ steps.worker-image.outputs.image }}
        run: |
          echo "🔍 Scanning $ECR_IMAGE"
          grype $ECR_IMAGE -o table
          grype $ECR_IMAGE -o json > grype-worker-report.json

      - name: Print Worker Scan Results
        run: |
          echo "📄 Grype scan JSON output for Worker image:"
          cat grype-worker-report.json

      - name: Upload Worker Scan Report to S3
        run: |
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
          aws s3 cp grype-worker-report.json s3://bionconsult-scan-images-bucket/reports/worker/grype-worker-report-$TIMESTAMP.json



      - name: Show values.yaml before update
        run: cat voting-app/values.yaml

      - name: Update values.yaml with new image tags
        run: |
          sed -i "s|^\( *image: \).*examplevotingapp_vote.*$|\1${{ steps.vote-image.outputs.image }}|" voting-app/values.yaml
          sed -i "s|^\( *image: \).*examplevotingapp_result.*$|\1${{ steps.result-image.outputs.image }}|" voting-app/values.yaml
          sed -i "s|^\( *image: \).*examplevotingapp_worker.*$|\1${{ steps.worker-image.outputs.image }}|" voting-app/values.yaml

      - name: Show values.yaml after update
        run: cat voting-app/values.yaml

      # - name: Checkout master branch
      #   uses: actions/checkout@v4
      #   with:
      #     ref: master
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     fetch-depth: 0

      # Commit and push the updated values.yaml
      - name: Commit and Push updated values.yaml
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout master
          git pull origin master
          git add voting-app/values.yaml
          git commit -m "chore: update images in values.yaml [skip ci]" || echo "No changes to commit"
          git push origin master

#       - name: Deploy Voting App with Helm
#         run: |
#           helm upgrade --install voting-app ./helm-chart \
#             --namespace voting-app \
#             --create-namespace \
#             --set vote.image=${{ steps.vote-image.outputs.image }} \
#             --set result.image=${{ steps.result-image.outputs.image }} \
#             --set worker.image=${{ steps.worker-image.outputs.image }}